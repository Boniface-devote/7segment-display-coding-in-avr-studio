
7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000292  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000292  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e24  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c6c  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d0  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00002314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00013d60  00000000  00000000  00002364  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000137  00000000  00000000  000160c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000161fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002df  00000000  00000000  0001622b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e9       	ldi	r30, 0x92	; 146
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	65 d0       	rcall	.+202    	; 0x1da <main>
 110:	be c0       	rjmp	.+380    	; 0x28e <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <Animate>:
#include <asf.h>
#include <util/delay.h>

void Animate(int num){
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	63 97       	sbiw	r28, 0x13	; 19
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
	char numbers[10]={0b00111111,0b00000110,0b11011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
 12c:	2a e0       	ldi	r18, 0x0A	; 10
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	f2 e0       	ldi	r31, 0x02	; 2
 132:	de 01       	movw	r26, r28
 134:	11 96       	adiw	r26, 0x01	; 1
 136:	01 90       	ld	r0, Z+
 138:	0d 92       	st	X+, r0
 13a:	2a 95       	dec	r18
 13c:	e1 f7       	brne	.-8      	; 0x136 <Animate+0x22>
	char led[9]={0b00000000,0b00000001,0b00000010,0b00000100,0b00001000,0b00010000,0b00100000,0b01000000,0b10000000};
 13e:	29 e0       	ldi	r18, 0x09	; 9
 140:	ea e0       	ldi	r30, 0x0A	; 10
 142:	f2 e0       	ldi	r31, 0x02	; 2
 144:	de 01       	movw	r26, r28
 146:	1b 96       	adiw	r26, 0x0b	; 11
 148:	01 90       	ld	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	2a 95       	dec	r18
 14e:	e1 f7       	brne	.-8      	; 0x148 <Animate+0x34>
	for (int i = num; i >= 0; i --){
 150:	99 23       	and	r25, r25
 152:	c4 f1       	brlt	.+112    	; 0x1c4 <Animate+0xb0>
 154:	de 01       	movw	r26, r28
 156:	a8 0f       	add	r26, r24
 158:	b9 1f       	adc	r27, r25
 15a:	8d 01       	movw	r16, r26
 15c:	0e 5f       	subi	r16, 0xFE	; 254
 15e:	1f 4f       	sbci	r17, 0xFF	; 255
 160:	9c 01       	movw	r18, r24
 162:	21 50       	subi	r18, 0x01	; 1
 164:	31 09       	sbc	r19, r1
 166:	eb e0       	ldi	r30, 0x0B	; 11
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	ec 0f       	add	r30, r28
 16c:	fd 1f       	adc	r31, r29
 16e:	e8 0f       	add	r30, r24
 170:	f9 1f       	adc	r31, r25
		
		PORTH = numbers[i];
 172:	42 e0       	ldi	r20, 0x02	; 2
 174:	51 e0       	ldi	r21, 0x01	; 1
		if(i == 9){
			PORTB = 0b00000001;
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	03 c0       	rjmp	.+6      	; 0x180 <Animate+0x6c>
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	31 09       	sbc	r19, r1
 17e:	31 97       	sbiw	r30, 0x01	; 1
void Animate(int num){
	char numbers[10]={0b00111111,0b00000110,0b11011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
	char led[9]={0b00000000,0b00000001,0b00000010,0b00000100,0b00001000,0b00010000,0b00100000,0b01000000,0b10000000};
	for (int i = num; i >= 0; i --){
		
		PORTH = numbers[i];
 180:	d8 01       	movw	r26, r16
 182:	8e 91       	ld	r24, -X
 184:	8d 01       	movw	r16, r26
 186:	da 01       	movw	r26, r20
 188:	8c 93       	st	X, r24
		if(i == 9){
 18a:	28 30       	cpi	r18, 0x08	; 8
 18c:	31 05       	cpc	r19, r1
 18e:	61 f4       	brne	.+24     	; 0x1a8 <Animate+0x94>
			PORTB = 0b00000001;
 190:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	bf e9       	ldi	r27, 0x9F	; 159
 194:	66 e8       	ldi	r22, 0x86	; 134
 196:	71 e0       	ldi	r23, 0x01	; 1
 198:	b1 50       	subi	r27, 0x01	; 1
 19a:	60 40       	sbci	r22, 0x00	; 0
 19c:	70 40       	sbci	r23, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <Animate+0x84>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <Animate+0x8e>
 1a2:	00 00       	nop
		else{
			
			PORTA= led[i];
		}
		_delay_ms(500);
		PORTB = 0b00000000;
 1a4:	15 b8       	out	0x05, r1	; 5
 1a6:	e9 cf       	rjmp	.-46     	; 0x17a <Animate+0x66>
		if(i == 9){
			PORTB = 0b00000001;
		}
		else{
			
			PORTA= led[i];
 1a8:	80 81       	ld	r24, Z
 1aa:	82 b9       	out	0x02, r24	; 2
 1ac:	8f e9       	ldi	r24, 0x9F	; 159
 1ae:	a6 e8       	ldi	r26, 0x86	; 134
 1b0:	b1 e0       	ldi	r27, 0x01	; 1
 1b2:	81 50       	subi	r24, 0x01	; 1
 1b4:	a0 40       	sbci	r26, 0x00	; 0
 1b6:	b0 40       	sbci	r27, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <Animate+0x9e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <Animate+0xa8>
 1bc:	00 00       	nop
		}
		_delay_ms(500);
		PORTB = 0b00000000;
 1be:	15 b8       	out	0x05, r1	; 5
#include <util/delay.h>

void Animate(int num){
	char numbers[10]={0b00111111,0b00000110,0b11011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
	char led[9]={0b00000000,0b00000001,0b00000010,0b00000100,0b00001000,0b00010000,0b00100000,0b01000000,0b10000000};
	for (int i = num; i >= 0; i --){
 1c0:	33 23       	and	r19, r19
 1c2:	dc f6       	brge	.-74     	; 0x17a <Animate+0x66>
			PORTA= led[i];
		}
		_delay_ms(500);
		PORTB = 0b00000000;
	}
}
 1c4:	63 96       	adiw	r28, 0x13	; 19
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	cd bf       	out	0x3d, r28	; 61
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <main>:


int main (void)
{
	DDRA=0b11111111;
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	81 b9       	out	0x01, r24	; 1
	DDRH=0b11111111;
 1de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRB=0b00000001;
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	94 b9       	out	0x04, r25	; 4
	DDRK=0b00000111;
 1e6:	97 e0       	ldi	r25, 0x07	; 7
 1e8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	
	

	PINK = 0b11111111;
 1ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
	
	while(1){
		PORTK = 0b00000011;
 1f0:	08 e0       	ldi	r16, 0x08	; 8
 1f2:	11 e0       	ldi	r17, 0x01	; 1
 1f4:	0f 2e       	mov	r0, r31
 1f6:	f3 e0       	ldi	r31, 0x03	; 3
 1f8:	df 2e       	mov	r13, r31
 1fa:	f0 2d       	mov	r31, r0
		
		//check 1
		if ((PINK & 0b00001000) == 0){
 1fc:	c6 e0       	ldi	r28, 0x06	; 6
 1fe:	d1 e0       	ldi	r29, 0x01	; 1
		if ((PINK & 0b00100000) == 0){
			Animate(7);
		}
		
		
		PORTK = 0b00000101;
 200:	0f 2e       	mov	r0, r31
 202:	f5 e0       	ldi	r31, 0x05	; 5
 204:	ef 2e       	mov	r14, r31
 206:	f0 2d       	mov	r31, r0
		//check 8
		if ((PINK & 0b00100000) == 0){
			Animate(8);
		}
		
		PORTK = 0b00000110;
 208:	0f 2e       	mov	r0, r31
 20a:	f6 e0       	ldi	r31, 0x06	; 6
 20c:	ff 2e       	mov	r15, r31
 20e:	f0 2d       	mov	r31, r0
	

	PINK = 0b11111111;
	
	while(1){
		PORTK = 0b00000011;
 210:	f8 01       	movw	r30, r16
 212:	d0 82       	st	Z, r13
		
		//check 1
		if ((PINK & 0b00001000) == 0){
 214:	88 81       	ld	r24, Y
 216:	83 fd       	sbrc	r24, 3
 218:	03 c0       	rjmp	.+6      	; 0x220 <main+0x46>
			Animate(1);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	7a df       	rcall	.-268    	; 0x114 <Animate>
		}
		
		//check 4
		if ((PINK & 0b00010000) == 0){
 220:	88 81       	ld	r24, Y
 222:	84 fd       	sbrc	r24, 4
 224:	03 c0       	rjmp	.+6      	; 0x22c <main+0x52>
			Animate(4);
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	74 df       	rcall	.-280    	; 0x114 <Animate>
		}
		
		//check 7
		if ((PINK & 0b00100000) == 0){
 22c:	88 81       	ld	r24, Y
 22e:	85 fd       	sbrc	r24, 5
 230:	03 c0       	rjmp	.+6      	; 0x238 <main+0x5e>
			Animate(7);
 232:	87 e0       	ldi	r24, 0x07	; 7
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	6e df       	rcall	.-292    	; 0x114 <Animate>
		}
		
		
		PORTK = 0b00000101;
 238:	f8 01       	movw	r30, r16
 23a:	e0 82       	st	Z, r14
		//check 2
		if ((PINK & 0b00001000) == 0){
 23c:	88 81       	ld	r24, Y
 23e:	83 fd       	sbrc	r24, 3
			Animate(2);
 240:	03 c0       	rjmp	.+6      	; 0x248 <main+0x6e>
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	66 df       	rcall	.-308    	; 0x114 <Animate>
		}
		
		//check 5
		if ((PINK & 0b00010000) == 0){
 248:	88 81       	ld	r24, Y
 24a:	84 fd       	sbrc	r24, 4
			Animate(5);
 24c:	03 c0       	rjmp	.+6      	; 0x254 <main+0x7a>
 24e:	85 e0       	ldi	r24, 0x05	; 5
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	60 df       	rcall	.-320    	; 0x114 <Animate>
		}
		
		//check 8
		if ((PINK & 0b00100000) == 0){
 254:	88 81       	ld	r24, Y
 256:	85 fd       	sbrc	r24, 5
			Animate(8);
 258:	03 c0       	rjmp	.+6      	; 0x260 <main+0x86>
 25a:	88 e0       	ldi	r24, 0x08	; 8
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	5a df       	rcall	.-332    	; 0x114 <Animate>
		}
		
		PORTK = 0b00000110;
 260:	f8 01       	movw	r30, r16
		//check 3
		if ((PINK & 0b00001000) == 0){
 262:	f0 82       	st	Z, r15
 264:	88 81       	ld	r24, Y
 266:	83 fd       	sbrc	r24, 3
			Animate(3);
 268:	03 c0       	rjmp	.+6      	; 0x270 <main+0x96>
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		//check 6
		if ((PINK & 0b00010000) == 0){
 26e:	52 df       	rcall	.-348    	; 0x114 <Animate>
 270:	88 81       	ld	r24, Y
 272:	84 fd       	sbrc	r24, 4
			Animate(6);
 274:	03 c0       	rjmp	.+6      	; 0x27c <main+0xa2>
 276:	86 e0       	ldi	r24, 0x06	; 6
 278:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		//check 9
		if ((PINK & 0b00100000) == 0){
 27a:	4c df       	rcall	.-360    	; 0x114 <Animate>
 27c:	88 81       	ld	r24, Y
 27e:	85 fd       	sbrc	r24, 5
			Animate(9);
 280:	03 c0       	rjmp	.+6      	; 0x288 <main+0xae>
 282:	89 e0       	ldi	r24, 0x09	; 9
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	46 df       	rcall	.-372    	; 0x114 <Animate>
		}
		
		PORTB = 0b00000000;
 288:	15 b8       	out	0x05, r1	; 5
		PORTA = 0b00000000;
 28a:	12 b8       	out	0x02, r1	; 2
	}
 28c:	c1 cf       	rjmp	.-126    	; 0x210 <main+0x36>

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
